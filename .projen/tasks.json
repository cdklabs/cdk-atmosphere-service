{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "BUMP_PACKAGE": "commit-and-tag-version@^12",
        "RELEASABLE_COMMITS": "git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep \"^(feat|fix){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+\""
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "git log --oneline -1 | grep -qv \"chore(release):\""
    },
    "bundle": {
      "name": "bundle",
      "description": "Prepare assets",
      "steps": [
        {
          "spawn": "bundle:allocate/allocate.lambda"
        },
        {
          "spawn": "bundle:allocation-timeout/allocation-timeout.lambda"
        },
        {
          "spawn": "bundle:cleanup-timeout/cleanup-timeout.lambda"
        },
        {
          "spawn": "bundle:deallocate/deallocate.lambda"
        },
        {
          "spawn": "bundle:storage/environments.monitor.lambda"
        },
        {
          "spawn": "bundle:test/integ/allocate/assert.lambda.ts"
        },
        {
          "spawn": "bundle:test/integ/allocation-timeout/assert.lambda.ts"
        },
        {
          "spawn": "bundle:test/integ/cleanup/assert.lambda.ts"
        },
        {
          "spawn": "bundle:test/integ/cleanup-timeout/assert.lambda.ts"
        },
        {
          "spawn": "bundle:test/integ/deallocate/assert.lambda.ts"
        },
        {
          "spawn": "bundle:test/integ/dev/assert.lambda.ts"
        },
        {
          "spawn": "bundle:cleanup"
        }
      ]
    },
    "bundle:allocate/allocate.lambda": {
      "name": "bundle:allocate/allocate.lambda",
      "description": "Create a JavaScript bundle from src/allocate/allocate.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/allocate/allocate.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/allocate/allocate.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:allocate/allocate.lambda:watch": {
      "name": "bundle:allocate/allocate.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/allocate/allocate.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/allocate/allocate.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/allocate/allocate.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:allocation-timeout/allocation-timeout.lambda": {
      "name": "bundle:allocation-timeout/allocation-timeout.lambda",
      "description": "Create a JavaScript bundle from src/allocation-timeout/allocation-timeout.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/allocation-timeout/allocation-timeout.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/allocation-timeout/allocation-timeout.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:allocation-timeout/allocation-timeout.lambda:watch": {
      "name": "bundle:allocation-timeout/allocation-timeout.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/allocation-timeout/allocation-timeout.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/allocation-timeout/allocation-timeout.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/allocation-timeout/allocation-timeout.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:cleanup": {
      "name": "bundle:cleanup",
      "steps": [
        {
          "exec": "esbuild --bundle src/cleanup/cleanup.task.ts --target=\"node18\" --platform=\"node\" --outfile=\"src/cleanup/image/index.js\" --tsconfig=\"tsconfig.dev.json\""
        }
      ]
    },
    "bundle:cleanup-timeout/cleanup-timeout.lambda": {
      "name": "bundle:cleanup-timeout/cleanup-timeout.lambda",
      "description": "Create a JavaScript bundle from src/cleanup-timeout/cleanup-timeout.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/cleanup-timeout/cleanup-timeout.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/cleanup-timeout/cleanup-timeout.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:cleanup-timeout/cleanup-timeout.lambda:watch": {
      "name": "bundle:cleanup-timeout/cleanup-timeout.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/cleanup-timeout/cleanup-timeout.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/cleanup-timeout/cleanup-timeout.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/cleanup-timeout/cleanup-timeout.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:deallocate/deallocate.lambda": {
      "name": "bundle:deallocate/deallocate.lambda",
      "description": "Create a JavaScript bundle from src/deallocate/deallocate.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/deallocate/deallocate.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/deallocate/deallocate.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:deallocate/deallocate.lambda:watch": {
      "name": "bundle:deallocate/deallocate.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/deallocate/deallocate.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/deallocate/deallocate.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/deallocate/deallocate.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:storage/environments.monitor.lambda": {
      "name": "bundle:storage/environments.monitor.lambda",
      "description": "Create a JavaScript bundle from src/storage/environments.monitor.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/storage/environments.monitor.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/storage/environments.monitor.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:storage/environments.monitor.lambda:watch": {
      "name": "bundle:storage/environments.monitor.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/storage/environments.monitor.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/storage/environments.monitor.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/storage/environments.monitor.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:test/integ/allocate/assert.lambda.ts": {
      "name": "bundle:test/integ/allocate/assert.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle test/integ/allocate/assert.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/test/integ/allocate/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:test/integ/allocation-timeout/assert.lambda.ts": {
      "name": "bundle:test/integ/allocation-timeout/assert.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle test/integ/allocation-timeout/assert.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/test/integ/allocation-timeout/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:test/integ/cleanup-timeout/assert.lambda.ts": {
      "name": "bundle:test/integ/cleanup-timeout/assert.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle test/integ/cleanup-timeout/assert.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/test/integ/cleanup-timeout/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:test/integ/cleanup/assert.lambda.ts": {
      "name": "bundle:test/integ/cleanup/assert.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle test/integ/cleanup/assert.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/test/integ/cleanup/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:test/integ/deallocate/assert.lambda.ts": {
      "name": "bundle:test/integ/deallocate/assert.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle test/integ/deallocate/assert.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/test/integ/deallocate/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:test/integ/dev/assert.lambda.ts": {
      "name": "bundle:test/integ/dev/assert.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle test/integ/dev/assert.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/test/integ/dev/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "env": {
        "ESLINT_USE_FLAT_CONFIG": "false"
      },
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools projenrc .projenrc.ts",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "integ": {
      "name": "integ",
      "description": "Run integration snapshot tests",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript"
        }
      ]
    },
    "integ:assert": {
      "name": "integ:assert",
      "steps": [
        {
          "spawn": "integ:test/allocate:assert"
        },
        {
          "spawn": "integ:test/allocation-timeout:assert"
        },
        {
          "spawn": "integ:test/cleanup:assert"
        },
        {
          "spawn": "integ:test/cleanup-timeout:assert"
        },
        {
          "spawn": "integ:test/deallocate:assert"
        },
        {
          "spawn": "integ:test/dev:assert"
        }
      ]
    },
    "integ:force": {
      "name": "integ:force",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --force"
        }
      ]
    },
    "integ:list": {
      "name": "integ:list",
      "steps": [
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --list"
        }
      ]
    },
    "integ:snapshot": {
      "name": "integ:snapshot",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --force --dry-run"
        }
      ]
    },
    "integ:test/allocate": {
      "name": "integ:test/allocate",
      "description": "Deploy -> Update Snapshot -> Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/allocate"
        }
      ]
    },
    "integ:test/allocate:assert": {
      "name": "integ:test/allocate:assert",
      "description": "Run the assertion locally",
      "steps": [
        {
          "exec": "ts-node test/integ/allocate/assert.lambda.ts"
        }
      ]
    },
    "integ:test/allocate:deploy": {
      "name": "integ:test/allocate:deploy",
      "description": "Force Deploy -> Update Snapshot -> Dont Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/allocate --force --disable-update-workflow --no-clean"
        }
      ]
    },
    "integ:test/allocate:force": {
      "name": "integ:test/allocate:force",
      "description": "Force Deploy -> Update Snapshot -> Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/allocate --force"
        }
      ]
    },
    "integ:test/allocate:snapshot": {
      "name": "integ:test/allocate:snapshot",
      "description": "Dont Deploy -> Update snapshot (discoureged)",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/allocate --dry-run --force"
        }
      ]
    },
    "integ:test/allocate:update": {
      "name": "integ:test/allocate:update",
      "description": "Deploy -> Update Snapshot (if needed)",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/allocate --update-on-failed"
        }
      ]
    },
    "integ:test/allocation-timeout": {
      "name": "integ:test/allocation-timeout",
      "description": "Deploy -> Update Snapshot -> Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/allocation-timeout"
        }
      ]
    },
    "integ:test/allocation-timeout:assert": {
      "name": "integ:test/allocation-timeout:assert",
      "description": "Run the assertion locally",
      "steps": [
        {
          "exec": "ts-node test/integ/allocation-timeout/assert.lambda.ts"
        }
      ]
    },
    "integ:test/allocation-timeout:deploy": {
      "name": "integ:test/allocation-timeout:deploy",
      "description": "Force Deploy -> Update Snapshot -> Dont Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/allocation-timeout --force --disable-update-workflow --no-clean"
        }
      ]
    },
    "integ:test/allocation-timeout:force": {
      "name": "integ:test/allocation-timeout:force",
      "description": "Force Deploy -> Update Snapshot -> Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/allocation-timeout --force"
        }
      ]
    },
    "integ:test/allocation-timeout:snapshot": {
      "name": "integ:test/allocation-timeout:snapshot",
      "description": "Dont Deploy -> Update snapshot (discoureged)",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/allocation-timeout --dry-run --force"
        }
      ]
    },
    "integ:test/allocation-timeout:update": {
      "name": "integ:test/allocation-timeout:update",
      "description": "Deploy -> Update Snapshot (if needed)",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/allocation-timeout --update-on-failed"
        }
      ]
    },
    "integ:test/cleanup": {
      "name": "integ:test/cleanup",
      "description": "Deploy -> Update Snapshot -> Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/cleanup"
        }
      ]
    },
    "integ:test/cleanup-timeout": {
      "name": "integ:test/cleanup-timeout",
      "description": "Deploy -> Update Snapshot -> Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/cleanup-timeout"
        }
      ]
    },
    "integ:test/cleanup-timeout:assert": {
      "name": "integ:test/cleanup-timeout:assert",
      "description": "Run the assertion locally",
      "steps": [
        {
          "exec": "ts-node test/integ/cleanup-timeout/assert.lambda.ts"
        }
      ]
    },
    "integ:test/cleanup-timeout:deploy": {
      "name": "integ:test/cleanup-timeout:deploy",
      "description": "Force Deploy -> Update Snapshot -> Dont Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/cleanup-timeout --force --disable-update-workflow --no-clean"
        }
      ]
    },
    "integ:test/cleanup-timeout:force": {
      "name": "integ:test/cleanup-timeout:force",
      "description": "Force Deploy -> Update Snapshot -> Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/cleanup-timeout --force"
        }
      ]
    },
    "integ:test/cleanup-timeout:snapshot": {
      "name": "integ:test/cleanup-timeout:snapshot",
      "description": "Dont Deploy -> Update snapshot (discoureged)",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/cleanup-timeout --dry-run --force"
        }
      ]
    },
    "integ:test/cleanup-timeout:update": {
      "name": "integ:test/cleanup-timeout:update",
      "description": "Deploy -> Update Snapshot (if needed)",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/cleanup-timeout --update-on-failed"
        }
      ]
    },
    "integ:test/cleanup:assert": {
      "name": "integ:test/cleanup:assert",
      "description": "Run the assertion locally",
      "steps": [
        {
          "exec": "ts-node test/integ/cleanup/assert.lambda.ts"
        }
      ]
    },
    "integ:test/cleanup:deploy": {
      "name": "integ:test/cleanup:deploy",
      "description": "Force Deploy -> Update Snapshot -> Dont Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/cleanup --force --disable-update-workflow --no-clean"
        }
      ]
    },
    "integ:test/cleanup:force": {
      "name": "integ:test/cleanup:force",
      "description": "Force Deploy -> Update Snapshot -> Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/cleanup --force"
        }
      ]
    },
    "integ:test/cleanup:snapshot": {
      "name": "integ:test/cleanup:snapshot",
      "description": "Dont Deploy -> Update snapshot (discoureged)",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/cleanup --dry-run --force"
        }
      ]
    },
    "integ:test/cleanup:update": {
      "name": "integ:test/cleanup:update",
      "description": "Deploy -> Update Snapshot (if needed)",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/cleanup --update-on-failed"
        }
      ]
    },
    "integ:test/deallocate": {
      "name": "integ:test/deallocate",
      "description": "Deploy -> Update Snapshot -> Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/deallocate"
        }
      ]
    },
    "integ:test/deallocate:assert": {
      "name": "integ:test/deallocate:assert",
      "description": "Run the assertion locally",
      "steps": [
        {
          "exec": "ts-node test/integ/deallocate/assert.lambda.ts"
        }
      ]
    },
    "integ:test/deallocate:deploy": {
      "name": "integ:test/deallocate:deploy",
      "description": "Force Deploy -> Update Snapshot -> Dont Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/deallocate --force --disable-update-workflow --no-clean"
        }
      ]
    },
    "integ:test/deallocate:force": {
      "name": "integ:test/deallocate:force",
      "description": "Force Deploy -> Update Snapshot -> Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/deallocate --force"
        }
      ]
    },
    "integ:test/deallocate:snapshot": {
      "name": "integ:test/deallocate:snapshot",
      "description": "Dont Deploy -> Update snapshot (discoureged)",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/deallocate --dry-run --force"
        }
      ]
    },
    "integ:test/deallocate:update": {
      "name": "integ:test/deallocate:update",
      "description": "Deploy -> Update Snapshot (if needed)",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/deallocate --update-on-failed"
        }
      ]
    },
    "integ:test/dev": {
      "name": "integ:test/dev",
      "description": "Deploy -> Update Snapshot -> Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/dev"
        }
      ]
    },
    "integ:test/dev:assert": {
      "name": "integ:test/dev:assert",
      "description": "Run the assertion locally",
      "steps": [
        {
          "exec": "ts-node test/integ/dev/assert.lambda.ts"
        }
      ]
    },
    "integ:test/dev:deploy": {
      "name": "integ:test/dev:deploy",
      "description": "Force Deploy -> Update Snapshot -> Dont Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/dev --force --disable-update-workflow --no-clean"
        }
      ]
    },
    "integ:test/dev:force": {
      "name": "integ:test/dev:force",
      "description": "Force Deploy -> Update Snapshot -> Destroy",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/dev --force"
        }
      ]
    },
    "integ:test/dev:snapshot": {
      "name": "integ:test/dev:snapshot",
      "description": "Dont Deploy -> Update snapshot (discoureged)",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/dev --dry-run --force"
        }
      ]
    },
    "integ:test/dev:update": {
      "name": "integ:test/dev:update",
      "description": "Deploy -> Update Snapshot (if needed)",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --directory test/integ/dev --update-on-failed"
        }
      ]
    },
    "integ:update": {
      "name": "integ:update",
      "description": "Run and update integration snapshot tests",
      "steps": [
        {
          "spawn": "bundle"
        },
        {
          "exec": "yarn integ-runner --parallel-regions us-east-1 --parallel-regions us-east-2 --parallel-regions us-west-1 --parallel-regions us-west-2 --language typescript --update-on-failed"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "spawn": "package:js",
          "condition": "node -e \"if (!process.env.CI) process.exit(1)\""
        },
        {
          "spawn": "package-all",
          "condition": "node -e \"if (process.env.CI) process.exit(1)\""
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        },
        {
          "spawn": "package:python"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target js"
        }
      ]
    },
    "package:python": {
      "name": "package:python",
      "description": "Create python language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target python"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        },
        {
          "spawn": "rosetta:extract"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "spawn": "bundle"
        }
      ]
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "rosetta:extract": {
      "name": "rosetta:extract",
      "description": "Test rosetta extract",
      "steps": [
        {
          "exec": "yarn --silent jsii-rosetta extract --strict"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "BUMP_PACKAGE": "commit-and-tag-version@^12",
        "RELEASABLE_COMMITS": "git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep \"^(feat|fix){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+\""
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "echo No dependencies to upgrade."
        }
      ]
    },
    "upgrade-cdklabs-projen-project-types": {
      "name": "upgrade-cdklabs-projen-project-types",
      "description": "upgrade cdklabs-projen-project-types",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=latest --peer --no-deprecated --dep=dev,peer,prod,optional --filter=cdklabs-projen-project-types,projen"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade cdklabs-projen-project-types projen"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "upgrade-dev-deps": {
      "name": "upgrade-dev-deps",
      "description": "upgrade dev dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --no-deprecated --dep=dev --filter=@aws-sdk/client-api-gateway,@aws-sdk/client-cloudformation,@aws-sdk/client-dynamodb,@aws-sdk/client-ecr,@aws-sdk/client-ecs,@aws-sdk/client-lambda,@aws-sdk/client-s3,@aws-sdk/client-scheduler,@aws-sdk/client-sts,@aws-sdk/credential-providers,@smithy/types,@smithy/util-stream,@types/aws-lambda,@types/jest,@types/unzipper,aws-cdk,aws-embedded-metrics,aws-sdk-client-mock,aws-sdk-client-mock-jest,esbuild,eslint-import-resolver-typescript,eslint-plugin-import,jest,jsii-diff,jsii-pacmak,jsii-rosetta,ts-jest,ts-node,typescript,unzipper"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @aws-sdk/client-api-gateway @aws-sdk/client-cloudformation @aws-sdk/client-dynamodb @aws-sdk/client-ecr @aws-sdk/client-ecs @aws-sdk/client-lambda @aws-sdk/client-s3 @aws-sdk/client-scheduler @aws-sdk/client-sts @aws-sdk/credential-providers @smithy/types @smithy/util-stream @stylistic/eslint-plugin @types/aws-lambda @types/jest @types/node @types/unzipper @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk aws-embedded-metrics aws-sdk-client-mock aws-sdk-client-mock-jest commit-and-tag-version esbuild eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit jsii-diff jsii-docgen jsii-pacmak jsii-rosetta jsii ts-jest ts-node typescript unzipper @aws-cdk/integ-runner @aws-cdk/integ-tests-alpha"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
